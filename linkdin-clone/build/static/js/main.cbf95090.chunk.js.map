{"version":3,"sources":["HeaderOptions.js","Header.js","Sidebar.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["HeaderOptions","avatar","Icon","title","class","Avatar","src","Header","className","alt","type","HomeIcon","SupervisorAccountIcon","BusinessCenterIcon","ChatIcon","NotificationsIcon","Sidebar","App","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yPAYeA,MAVf,YAA6C,IAArBC,EAAoB,EAApBA,OAAOC,EAAa,EAAbA,KAAKC,EAAQ,EAARA,MAChC,OACI,sBAAKC,MAAM,sHAAX,UACKF,GAAQ,cAACA,EAAD,IACRD,GAAU,cAACI,EAAA,EAAD,CAAQD,MAAM,sCAAsCE,IAAKL,IACpE,6BAAKE,Q,qFC8BFI,MA3Bf,WACI,OACI,sBAAKC,UAAU,SAASJ,MAAM,sFAA9B,UACI,sBAAKI,UAAU,eAAeJ,MAAM,2BAApC,UACI,qBACAE,IAAI,wDACJG,IAAI,eACJL,MAAM,SAEN,sBAAKI,UAAU,iBAAiBJ,MAAM,2EAAtC,UACI,cAAC,IAAD,IACA,uBAAOM,KAAK,OAAON,MAAM,+CAIjC,sBAAKI,UAAU,gBAAgBJ,MAAM,aAArC,UACI,cAAC,EAAD,CAAeF,KAAMS,IAAUR,MAAM,SACrC,cAAC,EAAD,CAAeD,KAAMU,IAAuBT,MAAM,eAClD,cAAC,EAAD,CAAeD,KAAMW,IAAoBV,MAAM,SAC/C,cAAC,EAAD,CAAeD,KAAMY,IAAUX,MAAM,cACrC,cAAC,EAAD,CAAeD,KAAMa,IAAmBZ,MAAM,kBAC9C,cAAC,EAAD,CAAeF,OAAO,0QAA0QE,MAAM,kBCHvSa,MAzBf,WACI,OACI,sBAAKZ,MAAM,4CAAX,UACI,sBAAKA,MAAM,GAAX,UACI,cAACC,EAAA,EAAD,CAAQD,MAAM,wCACd,8CACA,4DAEJ,gCACI,gCACI,+CACA,uCAEJ,gCACI,8CACA,2CAGR,8BACI,6CCPDa,MAXf,WACE,OACE,gCACI,cAAC,EAAD,IACA,qBAAKb,MAAM,OAAX,SACI,cAAC,EAAD,U,iCCRL,SAASc,IAAwB,IAAbC,EAAY,uDAAH,EAClC,OAAO,IAAIC,SAAQ,SAACC,GAAD,OACjBC,YAAW,kBAAMD,EAAQ,CAAEE,KAAMJ,MAAW,QCAhD,IAUaK,EAAiBC,YAC5B,qBAD4C,uCAE5C,WAAON,GAAP,eAAAO,EAAA,sEACyBR,EAAWC,GADpC,cACQQ,EADR,yBAGSA,EAASJ,MAHlB,2CAF4C,uDASjCK,EAAeC,YAAY,CACtCC,KAAM,UACNC,aArBmB,CACnBC,MAAO,EACPC,OAAQ,QAqBRC,SAAU,CACRC,UAAW,SAACC,GAKVA,EAAMJ,OAAS,GAEjBK,UAAW,SAACD,GACVA,EAAMJ,OAAS,GAGjBM,kBAAmB,SAACF,EAAOG,GACzBH,EAAMJ,OAASO,EAAOC,UAK1BC,cAAe,SAACC,GACdA,EACGC,QAAQnB,EAAeoB,SAAS,SAACR,GAChCA,EAAMH,OAAS,aAEhBU,QAAQnB,EAAeqB,WAAW,SAACT,EAAOG,GACzCH,EAAMH,OAAS,OACfG,EAAMJ,OAASO,EAAOC,cAKvB,EAAoDZ,EAAakB,QAgBzDlB,GAhBR,EAAQO,UAAR,EAAmBE,UAAnB,EAA8BC,kBAgBtBV,EAAf,SCrEamB,EAAQC,YAAe,CAClCC,QAAS,CACPC,QAASC,K,QCOOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUZ,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJa,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.cbf95090.chunk.js","sourcesContent":["import { Avatar } from '@material-ui/core'\nimport React from 'react'\nfunction HeaderOptions({avatar,Icon,title}) {\n    return (\n        <div class=\"flex flex-col items-center fill-current font-normal text-xs text-gray-500 px-3  hover:fill-current hover:text-black\">\n            {Icon && <Icon />}\n            {avatar && <Avatar class=\"h-6 w-6 object-contain rounded-full\" src={avatar}/>}\n            <h3>{title}</h3>\n        </div>\n    )\n}\n\nexport default HeaderOptions\n","import React from 'react'\nimport SearchIcon from '@material-ui/icons/Search';\nimport './App.css';\nimport HeaderOptions from './HeaderOptions';\nimport HomeIcon from '@material-ui/icons/Home';\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\nimport ChatIcon from '@material-ui/icons/Chat';\nimport BusinessCenterIcon from '@material-ui/icons/BusinessCenter';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\n\nfunction Header() {\n    return (\n        <div className=\"header\" class=\"flex border-2 border-solid sticky top-0 bg-white-0 border-gray-200 w-full pt-2 pb-2\">\n            <div className=\"header__left\" class=\"flex h-10 object-contain\">\n                <img \n                src=\"https://cdn-icons-png.flaticon.com/512/174/174857.png\" \n                alt=\"Linkdin Logo\" \n                class=\"mr-2\"\n                />\n                <div className=\"header__search\" class=\"p-2 flex items-center rounded h-10 bg-white-0 fill-current text-gray-500\">\n                    <SearchIcon/>\n                    <input type=\"text\" class=\"outline-none border-0 bg-transparent\"/>\n                </div>\n\n            </div>\n            <div className=\"header__right\" class=\"flex h-10 \">\n                <HeaderOptions Icon={HomeIcon} title=\"Home\"/>\n                <HeaderOptions Icon={SupervisorAccountIcon} title=\"My Network\"/>\n                <HeaderOptions Icon={BusinessCenterIcon} title=\"Jobs\"/>\n                <HeaderOptions Icon={ChatIcon} title=\"Messaging\"/>\n                <HeaderOptions Icon={NotificationsIcon} title=\"Notifications\"/>\n                <HeaderOptions avatar=\"https://scontent.fdac11-1.fna.fbcdn.net/v/t1.6435-9/131243672_1314493388925746_197719383945329023_n.jpg?_nc_cat=108&ccb=1-5&_nc_sid=09cbfe&_nc_ohc=DdelShrhfXMAX-vnIbQ&tn=Psso7tf-T0sqS74K&_nc_ht=scontent.fdac11-1.fna&oh=3be4eb06e87e270e76295e88b44b9228&oe=61A9A0B0\" title=\"Tahmid\"/>\n            </div>\n        </div>\n    )\n}\n\nexport default Header\n","import { Avatar } from '@material-ui/core'\nimport React from 'react'\n\nfunction Sidebar() {\n    return (\n        <div class=\"sticky top-20 border flex-col text-center\">\n            <div class=\"\">\n                <Avatar class=\"h-6 w-6 object-contain rounded-full\"/>\n                <h2>Tahmid Islam</h2>\n                <h4>tahmidislam73@gmail.com</h4>\n            </div>\n            <div>\n                <div>\n                    <p>Who viewed you</p>\n                    <p>200</p>\n                </div>\n                <div>\n                    <p>Views on post</p>\n                    <p>2000</p>\n                </div>\n            </div>    \n            <div>\n                <p>Recent</p>\n            </div>  \n        </div>\n    )\n}\n\nexport default Sidebar","import React from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Sidebar from './Sidebar';\nfunction App() {\n  return (\n    <div>\n        <Header/>\n        <div class=\"flex\">\n            <Sidebar/>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}